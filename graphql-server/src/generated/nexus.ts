/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Certificate: { // root type
    achievDate?: string | null; // String
    description?: string | null; // String
    expirationDate?: string | null; // String
    id: number; // Int!
    location?: string | null; // String
    title: string; // String!
    type: string; // String!
  }
  Employee: { // root type
    adres?: string | null; // String
    city?: string | null; // String
    email?: string | null; // String
    firstName?: string | null; // String
    function?: string | null; // String
    houseNumber?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
    postalCode?: string | null; // String
  }
  JwtToken: { // root type
    token: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    admin?: boolean | null; // Boolean
    id: number; // Int!
    lastName?: string | null; // String
    name?: string | null; // String
    userName?: string | null; // String
  }
  Vacation: { // root type
    description?: string | null; // String
    endDate?: string | null; // String
    id?: number | null; // Int
    startDate?: string | null; // String
  }
  Vehicle: { // root type
    description?: string | null; // String
    id: number; // Int!
    licensePlate?: string | null; // String
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Certificate: { // field return type
    achievDate: string | null; // String
    description: string | null; // String
    expirationDate: string | null; // String
    id: number; // Int!
    location: string | null; // String
    title: string; // String!
    type: string; // String!
  }
  Employee: { // field return type
    adres: string | null; // String
    certificates: Array<NexusGenRootTypes['Certificate'] | null> | null; // [Certificate]
    city: string | null; // String
    email: string | null; // String
    firstName: string | null; // String
    function: string | null; // String
    houseNumber: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    postalCode: string | null; // String
    vacations: Array<NexusGenRootTypes['Vacation'] | null> | null; // [Vacation]
  }
  JwtToken: { // field return type
    token: string; // String!
  }
  Mutation: { // field return type
    addCertificate: NexusGenRootTypes['Certificate'] | null; // Certificate
    addEmployee: NexusGenRootTypes['Employee'] | null; // Employee
    addVacation: NexusGenRootTypes['Vacation'] | null; // Vacation
    createVehicle: NexusGenRootTypes['Vehicle'] | null; // Vehicle
    deleteEmployee: NexusGenRootTypes['Employee'] | null; // Employee
    deleteVacation: NexusGenRootTypes['Vacation'] | null; // Vacation
    login: NexusGenRootTypes['JwtToken'] | null; // JwtToken
    register: NexusGenRootTypes['User'] | null; // User
    updateEmployee: NexusGenRootTypes['Employee'] | null; // Employee
  }
  Query: { // field return type
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    certificates: Array<NexusGenRootTypes['Certificate'] | null> | null; // [Certificate]
    employee: NexusGenRootTypes['Employee'] | null; // Employee
    employees: Array<NexusGenRootTypes['Employee'] | null> | null; // [Employee]
    userById: NexusGenRootTypes['User'] | null; // User
    vehicles: Array<NexusGenRootTypes['Vehicle'] | null> | null; // [Vehicle]
  }
  User: { // field return type
    admin: boolean | null; // Boolean
    id: number; // Int!
    lastName: string | null; // String
    name: string | null; // String
    userName: string | null; // String
  }
  Vacation: { // field return type
    description: string | null; // String
    endDate: string | null; // String
    id: number | null; // Int
    startDate: string | null; // String
  }
  Vehicle: { // field return type
    certificates: Array<NexusGenRootTypes['Certificate'] | null> | null; // [Certificate]
    description: string | null; // String
    id: number; // Int!
    licensePlate: string | null; // String
    name: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Certificate: { // field return type name
    achievDate: 'String'
    description: 'String'
    expirationDate: 'String'
    id: 'Int'
    location: 'String'
    title: 'String'
    type: 'String'
  }
  Employee: { // field return type name
    adres: 'String'
    certificates: 'Certificate'
    city: 'String'
    email: 'String'
    firstName: 'String'
    function: 'String'
    houseNumber: 'String'
    id: 'Int'
    lastName: 'String'
    postalCode: 'String'
    vacations: 'Vacation'
  }
  JwtToken: { // field return type name
    token: 'String'
  }
  Mutation: { // field return type name
    addCertificate: 'Certificate'
    addEmployee: 'Employee'
    addVacation: 'Vacation'
    createVehicle: 'Vehicle'
    deleteEmployee: 'Employee'
    deleteVacation: 'Vacation'
    login: 'JwtToken'
    register: 'User'
    updateEmployee: 'Employee'
  }
  Query: { // field return type name
    allUsers: 'User'
    certificates: 'Certificate'
    employee: 'Employee'
    employees: 'Employee'
    userById: 'User'
    vehicles: 'Vehicle'
  }
  User: { // field return type name
    admin: 'Boolean'
    id: 'Int'
    lastName: 'String'
    name: 'String'
    userName: 'String'
  }
  Vacation: { // field return type name
    description: 'String'
    endDate: 'String'
    id: 'Int'
    startDate: 'String'
  }
  Vehicle: { // field return type name
    certificates: 'Certificate'
    description: 'String'
    id: 'Int'
    licensePlate: 'String'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCertificate: { // args
      achievDate: string; // String!
      employeeId: number; // Int!
      expirationDate: string; // String!
      location: string; // String!
      title: string; // String!
      type: string; // String!
    }
    addEmployee: { // args
      adres: string; // String!
      city: string; // String!
      email: string; // String!
      firstName: string; // String!
      function: string; // String!
      houseNumber: string; // String!
      lastName: string; // String!
      postalCode: string; // String!
    }
    addVacation: { // args
      description: string; // String!
      employeeId: number; // Int!
      endDate: string; // String!
      startDate: string; // String!
    }
    createVehicle: { // args
      description: string; // String!
      licensePlate?: string | null; // String
      name: string; // String!
    }
    deleteEmployee: { // args
      id: number; // Int!
    }
    deleteVacation: { // args
      id: number; // Int!
    }
    login: { // args
      password: string; // String!
      userName: string; // String!
    }
    register: { // args
      lastName: string; // String!
      name: string; // String!
      password: string; // String!
      userName: string; // String!
    }
    updateEmployee: { // args
      adres: string; // String!
      city: string; // String!
      email: string; // String!
      firstName: string; // String!
      function: string; // String!
      houseNumber: string; // String!
      id: number; // Int!
      lastName: string; // String!
      postalCode: string; // String!
    }
  }
  Query: {
    employee: { // args
      id?: number | null; // Int
    }
    userById: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}